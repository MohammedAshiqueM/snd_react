import React, { useState } from 'react';
import { Tag, Clock, UserCheck, Calendar } from 'lucide-react';

const RequestCard = ({ request, onStatusUpdate, onEdit }) => {
  const [updateLoading, setUpdateLoading] = useState(false);
  const [error, setError] = useState(null);
  const { user } = useAuthStore();
  const navigate = useNavigate();
  const [showStatusDropdown, setShowStatusDropdown] = useState(false);
  const [isScheduleModalOpen, setIsScheduleModalOpen] = useState(false);
  const isOwner = request?.user?.username === user.username;
  const canSchedule = !isOwner && request.status === "PE";
  const hasProposedSchedule = request.schedule_proposals?.some(
    proposal => proposal.user.username === user.username
  );

  const handleClick = (e) => {
    if (e.target.closest(".status-badge") || e.target.closest("button")) {
      e.stopPropagation();
      return;
    }
    navigate(`/requests/${request.id}`);
  };

  const handleStatusChange = async (newStatus) => {
    setUpdateLoading(true);
    setError(null);

    try {
      await updateRequest(request.id, { status: newStatus });
      onStatusUpdate(request.id, newStatus);
      setShowStatusDropdown(false);
    } catch (error) {
      console.error("Error updating status:", error);
      setError("Failed to update status. Please try again.");
    } finally {
      setUpdateLoading(false);
    }
  };

  const renderScheduleButton = () => {
    if (isOwner) {
      return <ProposalCount count={request.schedule_proposals_count} />;
    }

    if (hasProposedSchedule) {
      return (
        <div className="px-4 py-2 rounded-lg bg-gray-600 text-gray-300">
          Schedule sent
        </div>
      );
    }

    if (canSchedule) {
      return (
        <>
          <button
            onClick={(e) => {
              e.stopPropagation();
              setIsScheduleModalOpen(true);
            }}
            className="px-4 py-2 rounded-lg bg-green-500 text-white hover:bg-green-600 transition-colors"
          >
            Propose Schedule
          </button>
          {isScheduleModalOpen && (
            <ScheduleProposal
              isOpen={isScheduleModalOpen}
              onClose={() => setIsScheduleModalOpen(false)}
              requestId={request.id}
              onScheduleProposed={() => {
                setIsScheduleModalOpen(false);
              }}
            />
          )}
        </>
      );
    }

    return null;
  };

  return (
    <div
      className="border border-gray-700 bg-[#1A1B2E] rounded-lg p-6 relative hover:border-blue-400 transition-colors duration-200 cursor-pointer"
      onClick={handleClick}
    >
      {/* Header Section */}
      <div className="flex justify-between items-start mb-4">
        <h2 className="text-xl font-semibold text-blue-400 hover:text-blue-300">
          {request.title}
        </h2>
        <div className="status-badge" onClick={(e) => e.stopPropagation()}>
          <StatusDropdown
            currentStatus={request.status}
            onStatusChange={handleStatusChange}
            isOwner={isOwner}
          />
        </div>
      </div>

      {/* Content Section */}
      <p className="text-gray-300 mb-6 whitespace-pre-wrap">
        {truncateText(request.body_content, 24)}
      </p>

      {/* Tags Section */}
      <div className="flex flex-wrap gap-2 mb-4">
        {request.tags.map((tagObj, index) => (
          <span
            key={index}
            className="flex items-center gap-1 px-3 py-1 text-sm rounded-full bg-blue-900/50 text-blue-400"
          >
            <Tag size={14} />
            {tagObj.tag.name}
          </span>
        ))}
      </div>

      {/* Details Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
        <div className="flex items-center gap-2 text-gray-400">
          <Clock size={16} />
          <span>{request.duration_minutes} minutes</span>
        </div>
        <div className="flex items-center gap-2 text-gray-400">
          <Calendar size={16} />
          <span>
            Preferred: {new Date(request.preferred_time).toLocaleString()}
          </span>
        </div>
      </div>

      {/* User Info */}
      <div className="flex items-center gap-2 text-gray-400 mb-4">
        <UserCheck size={16} />
        <span>
          Requested by {request.user?.username}{" "}
          {formatDistanceToNow(new Date(request.created_at))} ago
        </span>
      </div>

      {/* Schedule Button/Status */}
      <div
        className="flex justify-end gap-4 mt-4"
        onClick={(e) => e.stopPropagation()}
      >
        {renderScheduleButton()}
      </div>
    </div>
  );
};

export default RequestCard;